name: Publish Package

on:
  push:
    branches:
      - main

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get package version
        id: package-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $PACKAGE_VERSION"
      
      - name: Check if tag exists
        id: check-tag
        run: |
          TAG_EXISTS=$(git tag -l "v${{ steps.package-version.outputs.package_version }}")
          if [ -z "$TAG_EXISTS" ]; then
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          fi
          echo "Tag v${{ steps.package-version.outputs.package_version }} exists: ${{ steps.check-tag.outputs.tag_exists }}"
      
      - name: Create Git tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.package-version.outputs.package_version }}" -m "Release v${{ steps.package-version.outputs.package_version }}"
          git push origin "v${{ steps.package-version.outputs.package_version }}"
      
      - name: Create GitHub Release
        if: steps.check-tag.outputs.tag_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.package_version }}
          release_name: Release v${{ steps.package-version.outputs.package_version }}
          draft: false
          prerelease: false
  
  publish-npm:
    runs-on: ubuntu-latest
    needs: version-and-release
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci
      - run: npm run build
      - name: Set up npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          cat .npmrc
      - name: Check if package exists on npm
        id: check-npm
        run: |
          VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://registry.npmjs.org/$PACKAGE_NAME/$VERSION)
          
          if [ "$HTTP_STATUS" = "404" ]; then
            echo "package_exists=false" >> $GITHUB_OUTPUT
            echo "Package $PACKAGE_NAME@$VERSION does not exist on npm"
          else
            echo "package_exists=true" >> $GITHUB_OUTPUT
            echo "Package $PACKAGE_NAME@$VERSION already exists on npm"
          fi
      - run: npm publish --access public
        if: steps.check-npm.outputs.package_exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: echo "Package already exists on npm. Skipping publish."
        if: steps.check-npm.outputs.package_exists == 'true' 